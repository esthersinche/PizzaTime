package com.utp.pizzatime.view.admin;

import com.utp.pizzatime.controller.SalidaController;
import com.utp.pizzatime.model.dao.DisponibleDAO;
import com.utp.pizzatime.model.entity.Disponible;
import com.utp.pizzatime.model.entity.MovimientoCocina;
import com.utp.pizzatime.model.dao.impl.I_MovimientoCocinaDAO;
import com.utp.pizzatime.util.SQLConexion;
import com.utp.pizzatime.model.dao.impl.I_DisponibleDAO;
import com.utp.pizzatime.model.dao.impl.I_ProductoDAO;
import com.utp.pizzatime.model.dto.DisponibleProductoDTO;
import com.utp.pizzatime.service.ProductoService;

import com.utp.pizzatime.util.SesionActiva;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Dell
 */
public class RegistroIngresoo extends javax.swing.JPanel {

    private static final Logger log = LoggerFactory.getLogger(ProductoService.class);

    /**
     * Creates new form RegistroIngresoo
     */
    public RegistroIngresoo() {
        initComponents();
        cargarIngredientesSalida();
        cargarTiposMovimiento();
        cargarTablaSalida();
        cargarIngredientesEntrada();

        // Seleccionar un valor v√°lido antes de cargar motivos
        ComboBoxTipo.setSelectedIndex(0);
        cargarMotivosPorTipo(ComboBoxTipo.getSelectedItem().toString());
        cargarTablaProductosIngreso();
    }

    private void clearFieldsIngreso() {
        cboingingreso.setSelectedIndex(-1);
        txtcantcajasingreso.setText("");
        txtloteingreso.setText("");
        dateChooserFechaIng.setDate(null);
        dateChooserFechaCad.setDate(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Boton_Ingreso_Salida = new javax.swing.JTabbedPane();
        Panel_RegistroIngreso = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbprodingreso = new javax.swing.JTable();
        btncancelarprodingreso = new javax.swing.JButton();
        btnguardarprodingreso = new javax.swing.JButton();
        Text_FechaaIngreso = new javax.swing.JLabel();
        Texto_RegistroIngreso = new javax.swing.JLabel();
        Text_Ingrediente = new javax.swing.JLabel();
        cboingingreso = new javax.swing.JComboBox<>();
        Text_CantidadCajas = new javax.swing.JLabel();
        txtcantcajasingreso = new javax.swing.JTextField();
        Text_Lote = new javax.swing.JLabel();
        txtloteingreso = new javax.swing.JTextField();
        Text_FechaCaducidad = new javax.swing.JLabel();
        dateChooserFechaCad = new com.toedter.calendar.JDateChooser();
        dateChooserFechaIng = new com.toedter.calendar.JDateChooser();
        Panel_RegistroSalida = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Tabla_Productos_Salida = new javax.swing.JTable();
        Boton_Cancelar_Salida = new javax.swing.JButton();
        Boton_Guardar_Salida = new javax.swing.JButton();
        Text_Ingrediente1 = new javax.swing.JLabel();
        Texto_RegistroIngreso1 = new javax.swing.JLabel();
        ComboBox_Ingredientes_Salida = new javax.swing.JComboBox<>();
        Text_CantidadCajas1 = new javax.swing.JLabel();
        cantidadcou = new javax.swing.JTextField();
        ComboBoxTipo = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ComboBoxMotivo = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        fielLote = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 255, 255));

        Boton_Ingreso_Salida.setBackground(new java.awt.Color(0, 109, 86));
        Boton_Ingreso_Salida.setForeground(new java.awt.Color(255, 255, 255));

        Panel_RegistroIngreso.setBackground(new java.awt.Color(255, 255, 255));

        tbprodingreso.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID_Dis", "Producto", "Cantidad", "Fecha de ingreso", "Fecha de caducidad", "Lote"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tbprodingreso);

        btncancelarprodingreso.setBackground(new java.awt.Color(0, 109, 86));
        btncancelarprodingreso.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btncancelarprodingreso.setForeground(new java.awt.Color(255, 255, 255));
        btncancelarprodingreso.setText("Cancelar");
        btncancelarprodingreso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncancelarprodingresoActionPerformed(evt);
            }
        });

        btnguardarprodingreso.setBackground(new java.awt.Color(0, 109, 86));
        btnguardarprodingreso.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnguardarprodingreso.setForeground(new java.awt.Color(255, 255, 255));
        btnguardarprodingreso.setText("Guardar");
        btnguardarprodingreso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnguardarprodingresoActionPerformed(evt);
            }
        });

        Text_FechaaIngreso.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Text_FechaaIngreso.setText("Fecha de Ingreso");

        Texto_RegistroIngreso.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        Texto_RegistroIngreso.setForeground(new java.awt.Color(0, 109, 86));
        Texto_RegistroIngreso.setText("Registro de Ingreso");

        Text_Ingrediente.setBackground(new java.awt.Color(0, 0, 0));
        Text_Ingrediente.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Text_Ingrediente.setText("Ingrediente");

        cboingingreso.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboingingreso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboingingresoActionPerformed(evt);
            }
        });

        Text_CantidadCajas.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Text_CantidadCajas.setText("Cantidad Cajas");

        txtcantcajasingreso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtcantcajasingresoActionPerformed(evt);
            }
        });

        Text_Lote.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Text_Lote.setText("Lote");

        txtloteingreso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtloteingresoActionPerformed(evt);
            }
        });

        Text_FechaCaducidad.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Text_FechaCaducidad.setText("Fecha Caducidad");

        javax.swing.GroupLayout Panel_RegistroIngresoLayout = new javax.swing.GroupLayout(Panel_RegistroIngreso);
        Panel_RegistroIngreso.setLayout(Panel_RegistroIngresoLayout);
        Panel_RegistroIngresoLayout.setHorizontalGroup(
            Panel_RegistroIngresoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_RegistroIngresoLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(Panel_RegistroIngresoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Panel_RegistroIngresoLayout.createSequentialGroup()
                        .addGroup(Panel_RegistroIngresoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(Panel_RegistroIngresoLayout.createSequentialGroup()
                                .addComponent(Text_CantidadCajas)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtcantcajasingreso, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Text_Lote))
                            .addGroup(Panel_RegistroIngresoLayout.createSequentialGroup()
                                .addComponent(Text_FechaCaducidad)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dateChooserFechaCad, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(Panel_RegistroIngresoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(Panel_RegistroIngresoLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(txtloteingreso, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(Panel_RegistroIngresoLayout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addComponent(Text_FechaaIngreso)
                                .addGap(18, 18, 18)
                                .addComponent(dateChooserFechaIng, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(279, Short.MAX_VALUE))
                    .addGroup(Panel_RegistroIngresoLayout.createSequentialGroup()
                        .addComponent(Texto_RegistroIngreso)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Panel_RegistroIngresoLayout.createSequentialGroup()
                        .addGroup(Panel_RegistroIngresoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(Panel_RegistroIngresoLayout.createSequentialGroup()
                                .addComponent(Text_Ingrediente)
                                .addGap(35, 35, 35)
                                .addComponent(cboingingreso, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 131, Short.MAX_VALUE)
                                .addComponent(btnguardarprodingreso, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2))
                        .addGap(39, 39, 39))))
            .addGroup(Panel_RegistroIngresoLayout.createSequentialGroup()
                .addGap(336, 336, 336)
                .addComponent(btncancelarprodingreso, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        Panel_RegistroIngresoLayout.setVerticalGroup(
            Panel_RegistroIngresoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Panel_RegistroIngresoLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(Texto_RegistroIngreso)
                .addGap(12, 12, 12)
                .addGroup(Panel_RegistroIngresoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Text_Ingrediente)
                    .addComponent(cboingingreso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnguardarprodingreso, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(Panel_RegistroIngresoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtcantcajasingreso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Text_Lote)
                    .addComponent(txtloteingreso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Text_CantidadCajas))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(Panel_RegistroIngresoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Panel_RegistroIngresoLayout.createSequentialGroup()
                        .addGroup(Panel_RegistroIngresoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(Panel_RegistroIngresoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(Text_FechaCaducidad)
                                .addComponent(Text_FechaaIngreso))
                            .addComponent(dateChooserFechaCad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(46, 46, 46)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
                        .addGap(34, 34, 34)
                        .addComponent(btncancelarprodingreso, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(Panel_RegistroIngresoLayout.createSequentialGroup()
                        .addComponent(dateChooserFechaIng, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        Boton_Ingreso_Salida.addTab("Ingreso", Panel_RegistroIngreso);

        Panel_RegistroSalida.setBackground(new java.awt.Color(255, 255, 255));

        Tabla_Productos_Salida.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Producto", "Cantidad", "Fecha de ingreso", "Fecha de caducidad"
            }
        ));
        jScrollPane3.setViewportView(Tabla_Productos_Salida);

        Boton_Cancelar_Salida.setBackground(new java.awt.Color(0, 109, 86));
        Boton_Cancelar_Salida.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Boton_Cancelar_Salida.setForeground(new java.awt.Color(255, 255, 255));
        Boton_Cancelar_Salida.setText("Cancelar");
        Boton_Cancelar_Salida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Boton_Cancelar_SalidaActionPerformed(evt);
            }
        });

        Boton_Guardar_Salida.setBackground(new java.awt.Color(0, 109, 86));
        Boton_Guardar_Salida.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Boton_Guardar_Salida.setForeground(new java.awt.Color(255, 255, 255));
        Boton_Guardar_Salida.setText("Guardar");
        Boton_Guardar_Salida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Boton_Guardar_SalidaActionPerformed(evt);
            }
        });

        Text_Ingrediente1.setBackground(new java.awt.Color(0, 0, 0));
        Text_Ingrediente1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Text_Ingrediente1.setText("Ingrediente");

        Texto_RegistroIngreso1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        Texto_RegistroIngreso1.setForeground(new java.awt.Color(0, 109, 86));
        Texto_RegistroIngreso1.setText("Registro de Salida");

        ComboBox_Ingredientes_Salida.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ComboBox_Ingredientes_Salida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBox_Ingredientes_SalidaActionPerformed(evt);
            }
        });

        Text_CantidadCajas1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Text_CantidadCajas1.setText("Cantidad (Cajas o Unidades)");

        ComboBoxTipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ComboBoxTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBoxTipoActionPerformed(evt);
            }
        });

        jLabel1.setText("Tipo");

        jLabel2.setText("Motivo");

        ComboBoxMotivo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel3.setText("Lote");

        fielLote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fielLoteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Panel_RegistroSalidaLayout = new javax.swing.GroupLayout(Panel_RegistroSalida);
        Panel_RegistroSalida.setLayout(Panel_RegistroSalidaLayout);
        Panel_RegistroSalidaLayout.setHorizontalGroup(
            Panel_RegistroSalidaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_RegistroSalidaLayout.createSequentialGroup()
                .addGap(333, 333, 333)
                .addComponent(Boton_Cancelar_Salida, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(Panel_RegistroSalidaLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(Panel_RegistroSalidaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Panel_RegistroSalidaLayout.createSequentialGroup()
                        .addGroup(Panel_RegistroSalidaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane3)
                            .addGroup(Panel_RegistroSalidaLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ComboBoxTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Text_CantidadCajas1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cantidadcou, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(208, 208, 208))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, Panel_RegistroSalidaLayout.createSequentialGroup()
                                .addGroup(Panel_RegistroSalidaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(Panel_RegistroSalidaLayout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(ComboBoxMotivo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(61, 61, 61)
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(fielLote, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(Panel_RegistroSalidaLayout.createSequentialGroup()
                                        .addComponent(Text_Ingrediente1)
                                        .addGap(35, 35, 35)
                                        .addComponent(ComboBox_Ingredientes_Salida, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 79, Short.MAX_VALUE)
                                .addComponent(Boton_Guardar_Salida, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(29, 29, 29))
                    .addGroup(Panel_RegistroSalidaLayout.createSequentialGroup()
                        .addComponent(Texto_RegistroIngreso1)
                        .addGap(186, 522, Short.MAX_VALUE))))
        );
        Panel_RegistroSalidaLayout.setVerticalGroup(
            Panel_RegistroSalidaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Panel_RegistroSalidaLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(Texto_RegistroIngreso1)
                .addGap(12, 12, 12)
                .addGroup(Panel_RegistroSalidaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Text_Ingrediente1)
                    .addComponent(ComboBox_Ingredientes_Salida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Boton_Guardar_Salida, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(Panel_RegistroSalidaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ComboBoxTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(cantidadcou, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Text_CantidadCajas1))
                .addGap(18, 18, 18)
                .addGroup(Panel_RegistroSalidaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(ComboBoxMotivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fielLote, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(Boton_Cancelar_Salida, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );

        Boton_Ingreso_Salida.addTab("Salida", Panel_RegistroSalida);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Boton_Ingreso_Salida)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Boton_Ingreso_Salida)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btncancelarprodingresoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncancelarprodingresoActionPerformed
        clearFieldsIngreso();
    }//GEN-LAST:event_btncancelarprodingresoActionPerformed

    private void cargarIngredientesEntrada() {
        try (Connection con = new SQLConexion().establecerConexion()) {
            String sql = "SELECT NOMBRE_PRO FROM PRODUCTO";
            PreparedStatement ps = con.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            cboingingreso.removeAllItems();  // Limpiar primero

            while (rs.next()) {
                cboingingreso.addItem(rs.getString("NOMBRE_PRO")); // Cargar nombres reales
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al cargar ingredientes: " + e.getMessage());
        }
    }

    //----------------------------------------------------------------------
    private void cargarTablaProductosIngreso() {
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID");
        modelo.addColumn("Producto");
        modelo.addColumn("Cantidad Cajas");
        modelo.addColumn("Lote");
        modelo.addColumn("Fecha Ingreso");
        modelo.addColumn("Fecha Vencimiento");

        try (Connection con = new SQLConexion().establecerConexion()) {
            String sql = "SELECT d.ID_DIS, p.NOMBRE_PRO, d.CANTIDAD_CAJAS, d.LOTE, d.FECHA_DIS, d.VENCIMIENTO "
                    + "FROM DISPONIBLE d "
                    + "JOIN PRODUCTO p ON d.ID_PRO = p.ID_PRO "
                    + "ORDER BY d.FECHA_DIS DESC";
            PreparedStatement ps = con.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                Object[] fila = new Object[6];
                fila[0] = rs.getString("ID_DIS");
                fila[1] = rs.getString("NOMBRE_PRO");
                fila[2] = rs.getInt("CANTIDAD_CAJAS");
                fila[3] = rs.getString("LOTE");
                fila[4] = rs.getDate("FECHA_DIS");
                fila[5] = rs.getDate("VENCIMIENTO");
                modelo.addRow(fila);
            }

            tbprodingreso.setModel(modelo);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al cargar la tabla: " + e.getMessage());
            e.printStackTrace();
        }
    }

    //----------------------------------------------------------
    private String obtenerIdProductoPorNombre(String nombre) {
        String id = null;
        String sql = "SELECT ID_PRO FROM PRODUCTO WHERE NOMBRE_PRO = ?";
        try (Connection con = new SQLConexion().establecerConexion(); PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setString(1, nombre);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                id = rs.getString("ID_PRO");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al obtener ID del producto: " + e.getMessage());
        }
        return id;
    }
    //---------------------------------------------------------------------------------------
    //---------------------------------------------------------------------------------------

    private void btnguardarprodingresoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnguardarprodingresoActionPerformed

        try {
            // 1. Recoge y valida campos del formulario
            if (cboingingreso.getSelectedItem() == null
                    || txtcantcajasingreso.getText().trim().isEmpty()
                    || txtloteingreso.getText().trim().isEmpty()
                    || dateChooserFechaIng.getDate() == null
                    || dateChooserFechaCad.getDate() == null) {
                JOptionPane.showMessageDialog(this,
                        "Por favor complete todos los campos correctamente.",
                        "Campos incompletos",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }

            String nombreProducto = cboingingreso.getSelectedItem().toString();
            int cantidadCajas;
            try {
                cantidadCajas = Integer.parseInt(txtcantcajasingreso.getText().trim());
            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(this,
                        "La cantidad debe ser un n√∫mero entero.",
                        "Formato inv√°lido",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            // 2. Obtener y validar ID del producto
            I_ProductoDAO productoDAO = new I_ProductoDAO();
            String idPro = productoDAO.obtenerIdProductoPorNombre(nombreProducto);
            if (idPro == null) {
                JOptionPane.showMessageDialog(this,
                        "No se encontr√≥ el producto seleccionado.",
                        "Producto no encontrado",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            // 3. Generar nuevo ID_DIS y crear objeto Disponibe
            Disponible nuevo = new Disponible();
            I_DisponibleDAO dao = new I_DisponibleDAO();
            try (Connection con = new SQLConexion().establecerConexion()) {
                nuevo.setIdDis(dao.generarNuevoIdDisponible(con));
            }

            nuevo.setIdPro(idPro);
            nuevo.setCantidadCajas(cantidadCajas);
            nuevo.setLote(txtloteingreso.getText().trim());
            nuevo.setFechaDis(dateChooserFechaIng.getDate());
            nuevo.setVencimiento(dateChooserFechaCad.getDate());

            // 4. Insertar en BD
            dao.insertarDisp(nuevo);
            try {
                ProductoService prodSvc = new ProductoService();
                prodSvc.incrementarStock(idPro, cantidadCajas);
                log.info("Stock de producto {} incrementado en {}", idPro, cantidadCajas);
            } catch (SQLException ex) {
                log.error("Error incrementando stock de producto {}", idPro, ex);
                JOptionPane.showMessageDialog(this,
                        "Error al actualizar stock en PRODUCTO: " + ex.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE);
            }

            JOptionPane.showMessageDialog(this,
                    "Producto ingresado correctamente.",
                    "√âxito",
                    JOptionPane.INFORMATION_MESSAGE);

            // 5. Recarga de tabla
            cargarTablaProductosIngreso();
            clearFieldsIngreso();

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this,
                    "Ocurri√≥ un error al guardar: " + e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_btnguardarprodingresoActionPerformed

    private void cboingingresoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboingingresoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboingingresoActionPerformed

    private void txtloteingresoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtloteingresoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtloteingresoActionPerformed

    private void clearFieldsSalida() {
        ComboBox_Ingredientes_Salida.setSelectedIndex(-1);
        cantidadcou.setText("");
        fielLote.setText("");
        ComboBoxTipo.setSelectedIndex(-1);
        ComboBoxMotivo.removeAllItems();
        cargarTablaSalida();   // recarga tabla desde BD
    }

    private void Boton_Cancelar_SalidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Boton_Cancelar_SalidaActionPerformed
        clearFieldsSalida();
    }//GEN-LAST:event_Boton_Cancelar_SalidaActionPerformed
/*    // M√©todo para cargar los datos en la tabla despu√©s de una operaci√≥n.
    private void cargarTablaSalida() {
        try (Connection con = new SQLConexion().establecerConexion()) {
            // Modificada la consulta SQL para hacer un JOIN entre DISPONIBLE y PRODUCTO
            String sql = "SELECT p.NOMBRE_PRO, d.CANTIDAD_CAJAS, d.FECHA_DIS, d.VENCIMIENTO "
                    + "FROM DISPONIBLE d "
                    + "JOIN PRODUCTO p ON d.ID_PRO = p.ID_PRO "
                    + "WHERE d.CANTIDAD_CAJAS > 0";

            PreparedStatement ps = con.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            // Limpiar tabla antes de cargar los datos
            DefaultTableModel model = (DefaultTableModel) Tabla_Productos_Salida.getModel();
            model.setRowCount(0); // Limpiar filas existentes

            // Agregar los datos al modelo de la tabla
            while (rs.next()) {
                Object[] row = new Object[4];
                row[0] = rs.getString("NOMBRE_PRO");  // Producto
                row[1] = rs.getInt("CANTIDAD_CAJAS"); // Cantidad
                row[2] = rs.getDate("FECHA_DIS");     // Fecha de Ingreso
                row[3] = rs.getDate("VENCIMIENTO");   // Fecha de Caducidad
                model.addRow(row); // A√±adir una nueva fila
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al cargar los datos de la tabla: " + e.getMessage());
        }
    }

//combobox de ingredientes
    private void cargarIngredientesSalida() {
        try (Connection con = new SQLConexion().establecerConexion()) {
            String sql = "SELECT NOMBRE_PRO FROM PRODUCTO";
            PreparedStatement ps = con.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            ComboBox_Ingredientes_Salida.removeAllItems();  // Limpiar primero

            while (rs.next()) {
                ComboBox_Ingredientes_Salida.addItem(rs.getString("NOMBRE_PRO"));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al cargar ingredientes: " + e.getMessage());
        }
    }

    //combobox de tipos solo cocina y merma
    private void cargarTiposMovimiento() {
        ComboBoxTipo.removeAllItems();
        ComboBoxTipo.addItem("Cocina");
        ComboBoxTipo.addItem("Merma");
    }
    //motivo segun tipo

    private void cargarMotivosPorTipo(String tipo) {
        ComboBoxMotivo.removeAllItems();
        if ("Cocina".equals(tipo)) {
            ComboBoxMotivo.addItem("Preparaci√≥n de platos");
        } else if ("Merma".equals(tipo)) {
            ComboBoxMotivo.addItem("Producto vencido");
            ComboBoxMotivo.addItem("Mercanc√≠a da√±ada");
            ComboBoxMotivo.addItem("Mala rotaci√≥n del producto");
        }
    }

    public String obtenerIdDisponiblePorIngredienteYLote(String nombreProducto, String lote) {
        String idDis = null;
        String sql = "SELECT ID_DIS FROM DISPONIBLE "
                + "WHERE ID_PRO = (SELECT ID_PRO FROM PRODUCTO WHERE NOMBRE_PRO = ?) "
                + "AND LOTE = ?";

        try (Connection con = new SQLConexion().establecerConexion(); PreparedStatement ps = con.prepareStatement(sql)) {

            ps.setString(1, nombreProducto);
            ps.setString(2, lote);

            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                idDis = rs.getString("ID_DIS");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        return idDis;
    }

*/
    
    private final SalidaController controller = new SalidaController();

    private void cargarTablaSalida() {
        List<DisponibleProductoDTO> lista = controller.obtenerDisponiblesParaSalida();
        DefaultTableModel model = (DefaultTableModel) Tabla_Productos_Salida.getModel();
        model.setRowCount(0);
        for (DisponibleProductoDTO dto : lista) {
            Object[] row = new Object[4];
            row[0] = dto.getNombreProducto();
            row[1] = dto.getCantidad();
            row[2] = dto.getFechaDis();
            row[3] = dto.getVencimiento();
            model.addRow(row);
        }
    }

    private void cargarIngredientesSalida() {
        ComboBox_Ingredientes_Salida.removeAllItems();
        for (String nombre : controller.obtenerNombresProductos()) {
            ComboBox_Ingredientes_Salida.addItem(nombre);
        }
    }

    private void cargarTiposMovimiento() {
        ComboBoxTipo.removeAllItems();
        for (String tipo : controller.obtenerTiposMovimiento()) {
            ComboBoxTipo.addItem(tipo);
        }
    }

    private void cargarMotivosPorTipo(String tipo) {
        ComboBoxMotivo.removeAllItems();
        for (String motivo : controller.obtenerMotivosPorTipo(tipo)) {
            ComboBoxMotivo.addItem(motivo);
        }
    }

    private String obtenerIdDisponiblePorIngredienteYLote(String nombreProducto, String lote) {
        return controller.obtenerIdDisponiblePorProductoYLote(nombreProducto, lote);
    }


    private void Boton_Guardar_SalidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Boton_Guardar_SalidaActionPerformed
        try {
            String tipo = ComboBoxTipo.getSelectedItem().toString();
            String motivo = ComboBoxMotivo.getSelectedItem().toString();
            String ingredienteSeleccionado = ComboBox_Ingredientes_Salida.getSelectedItem().toString();
            int cantidad = Integer.parseInt(cantidadcou.getText());

            // DNI del empleado logueado
            int dni = SesionActiva.empleadoLogueado.getDni_emp(); // Aseg√∫rate que este acceso est√© implementado

            // Inicializamos variables a usar
            String id_dis = null;
            String lote = null;

            // DAO y entidad
            I_MovimientoCocinaDAO movimientoDao = new I_MovimientoCocinaDAO();
            MovimientoCocina movimiento = new MovimientoCocina();

            if ("Cocina".equals(tipo)) {
                // Buscar ID_DIS y LOTE con FIFO (producto m√°s pr√≥ximo a vencer con stock suficiente)
                DisponibleDAO disponibleDAO = new I_DisponibleDAO();
                Disponible disp = disponibleDAO.obtenerDisponibleFIFO(ingredienteSeleccionado, cantidad);

                if (disp == null) {
                    JOptionPane.showMessageDialog(this, "No hay stock disponible para este producto.");
                    return;
                }

                id_dis = disp.getIdDis();
                lote = disp.getLote();  // obtenido autom√°ticamente por FIFO

                movimiento.setCantidad_cajas(cantidad);
                movimiento.setCantidad_unit(1); // si fuera necesario
                movimiento.setMotivo("Preparaci√≥n de platos");

                // Actualizar el stock de DISPONIBLE (descontar la cantidad)
                try (Connection con = new SQLConexion().establecerConexion()) {
                    String updateSQL = "UPDATE DISPONIBLE SET CANTIDAD_CAJAS = CANTIDAD_CAJAS - ? WHERE ID_DIS = ?";
                    PreparedStatement psUpdate = con.prepareStatement(updateSQL);
                    psUpdate.setInt(1, cantidad); // Descontamos la cantidad
                    psUpdate.setString(2, id_dis);
                    psUpdate.executeUpdate();
                }
                // sincronizar stock en PRODUCTO
                try {
                    ProductoService prodSvc = new ProductoService();
                    String idProSalida = new I_ProductoDAO()
                            .obtenerIdProductoPorNombre(ingredienteSeleccionado);
                    prodSvc.decrementarStock(idProSalida, cantidad);
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this,
                            "Error al actualizar stock en PRODUCTO: " + ex.getMessage(),
                            "Error", JOptionPane.ERROR_MESSAGE);
                }

            } else if ("Merma".equals(tipo)) {
                // Merma: el usuario selecciona el lote manualmente
                lote = fielLote.getText().trim();

                if (lote.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Debe ingresar el lote para registrar una merma.");
                    return;
                }

                id_dis = obtenerIdDisponiblePorIngredienteYLote(ingredienteSeleccionado, lote);
                movimiento.setCantidad_unit(cantidad);
                movimiento.setCantidad_cajas(0);
                movimiento.setMotivo(motivo);

                // Actualizar el stock de DISPONIBLE (descontar la cantidad de merma)
                try (Connection con = new SQLConexion().establecerConexion()) {
                    String updateSQL = "UPDATE DISPONIBLE SET CANTIDAD_CAJAS = CANTIDAD_CAJAS - ? WHERE ID_DIS = ?";
                    PreparedStatement psUpdate = con.prepareStatement(updateSQL);
                    psUpdate.setInt(1, cantidad); // Descontamos la cantidad de merma
                    psUpdate.setString(2, id_dis);
                    psUpdate.executeUpdate();
                }
                // sincronizar stock en PRODUCTO
                try {
                    ProductoService prodSvc = new ProductoService();
                    prodSvc.decrementarStock(ingredienteSeleccionado, cantidad);
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this,
                            "Error al actualizar stock en PRODUCTO: " + ex.getMessage(),
                            "Error", JOptionPane.ERROR_MESSAGE);
                }
            }

            // Valores comunes
            movimiento.setId_dis(id_dis);
            movimiento.setDni_emp(dni);
            movimiento.setLote(lote);

            if ("Cocina".equals(tipo)) {
                movimientoDao.registrarMovimientoCocina(movimiento);
                JOptionPane.showMessageDialog(this, "Salida registrada para cocina.");
            } else {
                movimientoDao.registrarMovimientoMerma(movimiento);
                JOptionPane.showMessageDialog(this, "Salida registrada por merma.");
            }

            cargarTablaSalida();
            clearFieldsSalida();
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Ingrese una cantidad v√°lida.");
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al registrar movimiento: " + ex.getMessage());
        }
    }//GEN-LAST:event_Boton_Guardar_SalidaActionPerformed

    private void ComboBox_Ingredientes_SalidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBox_Ingredientes_SalidaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboBox_Ingredientes_SalidaActionPerformed

    private void txtcantcajasingresoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtcantcajasingresoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtcantcajasingresoActionPerformed

    private void fielLoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fielLoteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fielLoteActionPerformed

    private void ComboBoxTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBoxTipoActionPerformed
        Object item = ComboBoxTipo.getSelectedItem();
        if (item != null) {
            String tipoSeleccionado = item.toString();
            cargarMotivosPorTipo(tipoSeleccionado);
        }
    }//GEN-LAST:event_ComboBoxTipoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Boton_Cancelar_Salida;
    private javax.swing.JButton Boton_Guardar_Salida;
    private javax.swing.JTabbedPane Boton_Ingreso_Salida;
    private javax.swing.JComboBox<String> ComboBoxMotivo;
    private javax.swing.JComboBox<String> ComboBoxTipo;
    private javax.swing.JComboBox<String> ComboBox_Ingredientes_Salida;
    private javax.swing.JPanel Panel_RegistroIngreso;
    private javax.swing.JPanel Panel_RegistroSalida;
    private javax.swing.JTable Tabla_Productos_Salida;
    private javax.swing.JLabel Text_CantidadCajas;
    private javax.swing.JLabel Text_CantidadCajas1;
    private javax.swing.JLabel Text_FechaCaducidad;
    private javax.swing.JLabel Text_FechaaIngreso;
    private javax.swing.JLabel Text_Ingrediente;
    private javax.swing.JLabel Text_Ingrediente1;
    private javax.swing.JLabel Text_Lote;
    private javax.swing.JLabel Texto_RegistroIngreso;
    private javax.swing.JLabel Texto_RegistroIngreso1;
    private javax.swing.JButton btncancelarprodingreso;
    private javax.swing.JButton btnguardarprodingreso;
    private javax.swing.JTextField cantidadcou;
    private javax.swing.JComboBox<String> cboingingreso;
    private com.toedter.calendar.JDateChooser dateChooserFechaCad;
    private com.toedter.calendar.JDateChooser dateChooserFechaIng;
    private javax.swing.JTextField fielLote;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tbprodingreso;
    private javax.swing.JTextField txtcantcajasingreso;
    private javax.swing.JTextField txtloteingreso;
    // End of variables declaration//GEN-END:variables
}
